name: Build and Test

on:
  push:
    branches: [ master, develop, 'copilot/**' ]
  pull_request:
    branches: [ master, develop ]
  release:
    types: [ created ]

env:
  BUILD_TYPE: Release

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        compiler: [gcc-9, gcc-10, clang-10]
        arch: [x86, x64]
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build \
          libboost-all-dev libssl-dev
        
        # Install 32-bit libraries for x86 builds
        if [ "${{ matrix.arch }}" = "x86" ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib \
            libboost-all-dev:i386 libssl-dev:i386
        fi
    
    - name: Setup compiler
      run: |
        if [[ "${{ matrix.compiler }}" == gcc-* ]]; then
          version=${matrix.compiler##gcc-}
          sudo apt-get install -y gcc-${version} g++-${version}
          echo "CC=gcc-${version}" >> $GITHUB_ENV
          echo "CXX=g++-${version}" >> $GITHUB_ENV
        elif [[ "${{ matrix.compiler }}" == clang-* ]]; then
          version=${matrix.compiler##clang-}
          sudo apt-get install -y clang-${version}
          echo "CC=clang-${version}" >> $GITHUB_ENV
          echo "CXX=clang++-${version}" >> $GITHUB_ENV
        fi
    
    - name: Clone SourceMod SDK (mock for now)
      run: |
        # In real use, clone actual SourceMod SDK
        # For now, create minimal structure
        mkdir -p ${{ github.workspace }}/../sourcemod/public/extensions
        mkdir -p ${{ github.workspace }}/../sourcemod/public/sourcepawn
        mkdir -p ${{ github.workspace }}/../metamod-source/sourcehook
        mkdir -p ${{ github.workspace }}/../metamod-source/sourcemm
    
    - name: Configure CMake
      run: |
        cmake_flags=""
        if [ "${{ matrix.arch }}" = "x86" ]; then
          cmake_flags="-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32"
        fi
        
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DENABLE_TLS=ON \
          -DENABLE_IPV6=ON \
          -DBUILD_TESTS=OFF \
          -DSOURCEMOD_DIR=${{ github.workspace }}/../sourcemod \
          -DMMSOURCE_DIR=${{ github.workspace }}/../metamod-source \
          $cmake_flags
    
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}
    
    - name: Run tests
      working-directory: build
      run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure
      if: matrix.arch == 'x64'  # Only run tests on 64-bit for now
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: socket-linux-${{ matrix.compiler }}-${{ matrix.arch }}
        path: |
          build/socket.ext.so
          socket.inc
        retention-days: 30

  build-windows:
    name: Build Windows
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [Win32, x64]
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
    
    - name: Install vcpkg dependencies
      run: |
        vcpkg install boost-asio:${{ matrix.arch == 'Win32' && 'x86' || 'x64' }}-windows
        vcpkg install openssl:${{ matrix.arch == 'Win32' && 'x86' || 'x64' }}-windows
        vcpkg integrate install
    
    - name: Clone SourceMod SDK (mock for now)
      run: |
        # In real use, clone actual SourceMod SDK
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\..\sourcemod\public\extensions"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\..\sourcemod\public\sourcepawn"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\..\metamod-source\sourcehook"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\..\metamod-source\sourcemm"
    
    - name: Configure CMake
      run: |
        cmake -B build -A ${{ matrix.arch }} `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
          -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" `
          -DENABLE_TLS=ON `
          -DENABLE_IPV6=ON `
          -DBUILD_TESTS=OFF `
          -DSOURCEMOD_DIR="${{ github.workspace }}\..\sourcemod" `
          -DMMSOURCE_DIR="${{ github.workspace }}\..\metamod-source"
    
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: socket-windows-${{ matrix.arch }}
        path: |
          build/${{ env.BUILD_TYPE }}/socket.ext.dll
          socket.inc
        retention-days: 30

  test-suite:
    name: Run Test Suite
    runs-on: ubuntu-latest
    needs: [build-linux]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build libboost-all-dev libssl-dev
    
    - name: Setup test environment
      run: |
        mkdir -p ${{ github.workspace }}/../sourcemod/public/extensions
        mkdir -p ${{ github.workspace }}/../sourcemod/public/sourcepawn
        mkdir -p ${{ github.workspace }}/../metamod-source/sourcehook
        mkdir -p ${{ github.workspace }}/../metamod-source/sourcemm
    
    - name: Build with tests
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_TLS=ON \
          -DENABLE_IPV6=ON \
          -DBUILD_TESTS=ON \
          -DSOURCEMOD_DIR=${{ github.workspace }}/../sourcemod \
          -DMMSOURCE_DIR=${{ github.workspace }}/../metamod-source
        cmake --build build
    
    - name: Run unit tests
      working-directory: build
      run: ctest --output-on-failure --verbose

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Create release archives
      run: |
        cd artifacts
        for dir in socket-*; do
          zip -r "${dir}.zip" "$dir"
        done
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
